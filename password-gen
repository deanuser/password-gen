<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta and Title -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Generator with History and Persistence</title>

    <!-- React and ReactDOM -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js" crossorigin></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js" crossorigin></script>

    <!-- Babel for JSX transformation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js" crossorigin></script>

    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" crossorigin>

    <!-- Animate.css for animations -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <!-- zxcvbn library for password strength estimation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/zxcvbn/4.4.2/zxcvbn.js" crossorigin></script>

    <!-- Tailwind CSS Dark Mode Configuration -->
    <script>
        tailwind.config = {
            darkMode: 'class',
        }
    </script>
</head>
<body class="bg-gray-100 dark:bg-gray-900">
    <div id="root"></div>

    <script type="text/babel">
        // Custom Hook for Dark Mode with Persistence
        function useDarkMode() {
            const [darkMode, setDarkMode] = React.useState(() => {
                const savedMode = localStorage.getItem('darkMode');
                return savedMode ? JSON.parse(savedMode) : false;
            });

            React.useEffect(() => {
                if (darkMode) {
                    document.documentElement.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                }
                localStorage.setItem('darkMode', JSON.stringify(darkMode));
            }, [darkMode]);

            return [darkMode, setDarkMode];
        }

        // Component: PasswordOptions
        function PasswordOptions({ options, toggleOption }) {
            return (
                <div className="space-y-4">
                    {Object.keys(options).map((option, idx) => (
                        <div key={idx} className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-700 dark:text-gray-200">
                                Include {option.replace('include', '')}
                            </span>
                            <button
                                onClick={() => toggleOption(option)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full ${options[option] ? 'bg-blue-600' : 'bg-gray-200 dark:bg-gray-700'}`}
                                aria-label={`Toggle ${option}`}
                            >
                                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${options[option] ? 'translate-x-6' : 'translate-x-1'}`} />
                            </button>
                        </div>
                    ))}
                </div>
            );
        }

        // Component: PasswordStrengthIndicator
        function PasswordStrengthIndicator({ strength }) {
            const getStrengthColor = () => {
                return {
                    'Very Weak': 'bg-red-500',
                    'Weak': 'bg-orange-500',
                    'Fair': 'bg-yellow-500',
                    'Strong': 'bg-green-500',
                    'Very Strong': 'bg-green-700',
                }[strength] || 'bg-gray-300';
            };

            return (
                <div className="flex items-center mt-2">
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-200 mr-2">Strength:</span>
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold text-white ${getStrengthColor()}`}>
                        {strength}
                    </span>
                </div>
            );
        }

        // Component: PasswordHistory
        function PasswordHistory({ history, copyToClipboard, deletePassword, clearHistory }) {
            return (
                <div className="mt-6">
                    <div className="flex items-center justify-between">
                        <h2 className="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-100">Password History</h2>
                        <button
                            onClick={clearHistory}
                            className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-500"
                            aria-label="Clear history"
                        >
                            Clear History
                        </button>
                    </div>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                        Note: Passwords are stored temporarily in this session. Be cautious when using shared devices.
                    </p>
                    <ul className="space-y-2 mt-2">
                        {history.map((pass, index) => (
                            <li key={index} className="flex items-center justify-between bg-gray-100 dark:bg-gray-800 p-2 rounded">
                                <span className="font-mono text-gray-800 dark:text-gray-200">{pass}</span>
                                <div>
                                    <button
                                        onClick={() => copyToClipboard(pass)}
                                        className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-500 mr-2"
                                        aria-label="Copy password"
                                    >
                                        <i className="fas fa-copy"></i>
                                    </button>
                                    <button
                                        onClick={() => deletePassword(index)}
                                        className="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-500"
                                        aria-label="Delete password"
                                    >
                                        <i className="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </li>
                        ))}
                    </ul>
                </div>
            );
        }

        // Main Component: PasswordGenerator
        function PasswordGenerator() {
            // Initialize state with localStorage data if available
            const [length, setLength] = React.useState(() => {
                const savedLength = localStorage.getItem('passwordLength');
                return savedLength ? parseInt(savedLength) : 12;
            });

            const [options, setOptions] = React.useState(() => {
                const savedOptions = localStorage.getItem('passwordOptions');
                return savedOptions ? JSON.parse(savedOptions) : {
                    includeSymbols: true,
                    includeUppercase: true,
                    includeNumbers: true
                };
            });

            const [password, setPassword] = React.useState('');
            const [copyMessage, setCopyMessage] = React.useState('');
            const [passwordStrength, setPasswordStrength] = React.useState('');

            const [passwordHistory, setPasswordHistory] = React.useState(() => {
                const savedHistory = localStorage.getItem('passwordHistory');
                return savedHistory ? JSON.parse(savedHistory) : [];
            });

            const [darkMode, setDarkMode] = useDarkMode();

            // Save length to localStorage whenever it changes
            React.useEffect(() => {
                localStorage.setItem('passwordLength', length);
            }, [length]);

            // Save options to localStorage whenever they change
            React.useEffect(() => {
                localStorage.setItem('passwordOptions', JSON.stringify(options));
            }, [options]);

            // Save password history to localStorage whenever it changes
            React.useEffect(() => {
                localStorage.setItem('passwordHistory', JSON.stringify(passwordHistory));
            }, [passwordHistory]);

            // Function to toggle options
            const toggleOption = (option) => {
                setOptions(prev => ({ ...prev, [option]: !prev[option] }));
            };

            // Secure Random Number Generator
            const getRandomValue = (max) => {
                const array = new Uint32Array(1);
                window.crypto.getRandomValues(array);
                return array[0] % max;
            };

            // Function to generate password
            const generatePassword = React.useCallback(() => {
                const chars = {
                    lowercase: 'abcdefghijklmnopqrstuvwxyz',
                    uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                    numbers: '0123456789',
                    symbols: '!@#$%^&*()_+~`|}{[]:;?><,./-='
                };

                let charset = chars.lowercase;
                let requiredChars = '';

                if (options.includeUppercase) {
                    charset += chars.uppercase;
                    requiredChars += chars.uppercase.charAt(getRandomValue(chars.uppercase.length));
                }
                if (options.includeNumbers) {
                    charset += chars.numbers;
                    requiredChars += chars.numbers.charAt(getRandomValue(chars.numbers.length));
                }
                if (options.includeSymbols) {
                    charset += chars.symbols;
                    requiredChars += chars.symbols.charAt(getRandomValue(chars.symbols.length));
                }

                let newPassword = '';
                for (let i = 0; i < length - requiredChars.length; i++) {
                    newPassword += charset.charAt(getRandomValue(charset.length));
                }

                // Combine and shuffle the password
                newPassword += requiredChars;
                newPassword = newPassword.split('').sort(() => getRandomValue(2) - 1).join('');

                setPassword(newPassword);
                setCopyMessage('');
                calculatePasswordStrength(newPassword);

                // Update password history
                setPasswordHistory(prev => {
                    const updatedHistory = [newPassword, ...prev.slice(0, 4)];
                    return updatedHistory;
                });
            }, [length, options]);

            // Function to calculate password strength
            const calculatePasswordStrength = (pass) => {
                const result = zxcvbn(pass);
                const score = result.score; // Score is between 0 and 4
                const strengths = ['Very Weak', 'Weak', 'Fair', 'Strong', 'Very Strong'];
                setPasswordStrength(strengths[score]);
            };

            // Function to copy to clipboard
            const copyToClipboard = (text) => {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(text).then(() => {
                        setCopyMessage('Password copied to clipboard!');
                        setTimeout(() => setCopyMessage(''), 2000);
                    }, () => {
                        setCopyMessage('Failed to copy password');
                        setTimeout(() => setCopyMessage(''), 2000);
                    });
                } else {
                    setCopyMessage('Clipboard API not supported');
                    setTimeout(() => setCopyMessage(''), 2000);
                }
            };

            // Function to delete a password from history
            const deletePassword = (index) => {
                setPasswordHistory(prev => prev.filter((_, i) => i !== index));
            };

            // Function to clear the entire history
            const clearHistory = () => {
                setPasswordHistory([]);
            };

            return (
                <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="max-w-md mx-auto mt-10 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
                        <div className="flex items-center justify-between">
                            <h1 className="text-2xl font-bold mb-6 text-gray-800 dark:text-gray-100">Password Generator</h1>
                            <button
                                onClick={() => setDarkMode(!darkMode)}
                                className="text-gray-700 dark:text-gray-200 focus:outline-none"
                                aria-label="Toggle dark mode"
                            >
                                {darkMode ? <i className="fas fa-sun"></i> : <i className="fas fa-moon"></i>}
                            </button>
                        </div>

                        <div className="mb-4">
                            <label htmlFor="length" className="block text-sm font-medium text-gray-700 dark:text-gray-200">
                                Password Length: {length}
                            </label>
                            <input
                                type="range"
                                id="length"
                                min="6"
                                max="30"
                                value={length}
                                onChange={(e) => setLength(parseInt(e.target.value))}
                                className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer mt-2"
                                aria-valuenow={length}
                                aria-valuemin="6"
                                aria-valuemax="30"
                                aria-label="Password length"
                            />
                        </div>

                        <PasswordOptions options={options} toggleOption={toggleOption} />

                        <button
                            onClick={generatePassword}
                            className="w-full mt-6 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                            aria-label="Generate password"
                        >
                            Generate Password
                        </button>

                        {password && (
                            <div className="mt-6 animate__animated animate__fadeIn">
                                <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-200">
                                    Generated Password:
                                </label>
                                <div className="flex mt-2">
                                    <input
                                        type="text"
                                        id="password"
                                        value={password}
                                        readOnly
                                        className="flex-grow px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"
                                        aria-label="Generated password"
                                    />
                                    <button
                                        onClick={() => copyToClipboard(password)}
                                        className="ml-2 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50"
                                        aria-label="Copy password"
                                    >
                                        <i className="fas fa-copy"></i>
                                    </button>
                                </div>
                                <PasswordStrengthIndicator strength={passwordStrength} />
                                {copyMessage && (
                                    <p className="mt-2 text-sm text-green-600 dark:text-green-400">{copyMessage}</p>
                                )}
                            </div>
                        )}

                        {passwordHistory.length > 0 && (
                            <PasswordHistory
                                history={passwordHistory}
                                copyToClipboard={copyToClipboard}
                                deletePassword={deletePassword}
                                clearHistory={clearHistory}
                            />
                        )}
                    </div>
                </div>
            );
        }

        // Render the PasswordGenerator component
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<PasswordGenerator />);
    </script>
</body>
</html>
