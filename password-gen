<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Generator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    <div id="root"></div>

    <script type="text/babel">
        const PasswordGenerator = () => {
            const [length, setLength] = React.useState(12);
            const [includeSymbols, setIncludeSymbols] = React.useState(true);
            const [includeUppercase, setIncludeUppercase] = React.useState(true);
            const [includeNumbers, setIncludeNumbers] = React.useState(true);
            const [password, setPassword] = React.useState('');
            const [copyMessage, setCopyMessage] = React.useState('');

            const generatePassword = () => {
                let charset = 'abcdefghijklmnopqrstuvwxyz';
                if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                if (includeNumbers) charset += '0123456789';
                if (includeSymbols) charset += '!@#$%^&*()_+~`|}{[]:;?><,./-=';

                let newPassword = '';
                for (let i = 0; i < length; i++) {
                    newPassword += charset.charAt(Math.floor(Math.random() * charset.length));
                }
                setPassword(newPassword);
                setCopyMessage('');
            };

            const copyToClipboard = () => {
                navigator.clipboard.writeText(password).then(() => {
                    setCopyMessage('Password copied to clipboard!');
                    setTimeout(() => setCopyMessage(''), 2000);
                }, (err) => {
                    console.error('Could not copy text: ', err);
                    setCopyMessage('Failed to copy password');
                    setTimeout(() => setCopyMessage(''), 2000);
                });
            };

            return (
                <div className="max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
                    <h1 className="text-2xl font-bold mb-6">Password Generator</h1>
                    
                    <div className="mb-4">
                        <label htmlFor="length" className="block text-sm font-medium text-gray-700">
                            Password Length: {length}
                        </label>
                        <input
                            type="range"
                            id="length"
                            min="6"
                            max="30"
                            value={length}
                            onChange={(e) => setLength(parseInt(e.target.value))}
                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer mt-2"
                        />
                    </div>
                    
                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-700">Include Symbols</span>
                            <button
                                onClick={() => setIncludeSymbols(!includeSymbols)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full ${includeSymbols ? 'bg-blue-600' : 'bg-gray-200'}`}
                            >
                                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${includeSymbols ? 'translate-x-6' : 'translate-x-1'}`} />
                            </button>
                        </div>
                        
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-700">Include Uppercase</span>
                            <button
                                onClick={() => setIncludeUppercase(!includeUppercase)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full ${includeUppercase ? 'bg-blue-600' : 'bg-gray-200'}`}
                            >
                                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${includeUppercase ? 'translate-x-6' : 'translate-x-1'}`} />
                            </button>
                        </div>
                        
                        <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-700">Include Numbers</span>
                            <button
                                onClick={() => setIncludeNumbers(!includeNumbers)}
                                className={`relative inline-flex h-6 w-11 items-center rounded-full ${includeNumbers ? 'bg-blue-600' : 'bg-gray-200'}`}
                            >
                                <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${includeNumbers ? 'translate-x-6' : 'translate-x-1'}`} />
                            </button>
                        </div>
                    </div>
                    
                    <button
                        onClick={generatePassword}
                        className="w-full mt-6 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                    >
                        Generate Password
                    </button>
                    
                    {password && (
                        <div className="mt-6">
                            <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                                Generated Password:
                            </label>
                            <div className="flex mt-2">
                                <input
                                    type="text"
                                    id="password"
                                    value={password}
                                    readOnly
                                    className="flex-grow px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                />
                                <button
                                    onClick={copyToClipboard}
                                    className="ml-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50"
                                >
                                    Copy
                                </button>
                            </div>
                            {copyMessage && (
                                <p className="mt-2 text-sm text-green-600">{copyMessage}</p>
                            )}
                        </div>
                    )}
                </div>
            );
        };

        ReactDOM.render(<PasswordGenerator />, document.getElementById('root'));
    </script>
</body>
</html>
